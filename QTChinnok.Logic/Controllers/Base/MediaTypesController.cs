//@GeneratedCode
namespace QTChinnok.Logic.Controllers.Base
{
    using TEntity = Entities.Base.MediaType;
    using TOutModel = Models.Base.MediaType;
    /// <summary>
    /// Generated by the generator.
    /// </summary>
    
    public sealed partial class MediaTypesController : EntitiesController<TEntity, TOutModel>, Contracts.Base.IMediaTypesAccess
    {
        /// <summary>
        /// Generated by the generator
        /// </summary>
        static MediaTypesController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        
        /// <summary>
        /// Generated by the generator
        /// </summary>
        public MediaTypesController()
        {
            Constructing();
            
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        /// <summary>
        /// Generated by the generator
        /// </summary>
        public MediaTypesController(ControllerObject other)
        : base(other)
        {
            Constructing();
            
            Constructed();
        }
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        internal override TOutModel ToModel(TEntity entity)
        {
            var handled = false;
            TOutModel? result = default;
            
            BeforeToOutModel(entity, ref result, ref handled);
            if (handled == false || result == default)
            {
                result = new TOutModel(entity);
            }
            AfterToOutModel(entity, result);
            return result;
        }
        partial void BeforeToOutModel(TEntity entity, ref TOutModel? result, ref bool handled);
        partial void AfterToOutModel(TEntity entity, TOutModel result);
    }
}
